Depth-first search can be conveniently implemented using recursion.
The following function dfs begins a depth-first search at a given node. The function assumes that the graph is stored as adjacency lists in an array and also maintains an array that keeps track of the visited nodes. Initially, each array value is false, and when the search arrives at node s, the value of visited[s] becomes true. The function can be implemented as follows:

vector<int> adj[N];

bool visited[N];

void dfs(int s) {
    if (visited[s]) return;
    visited[s] = true;

    // process node s
    for (auto u: adj[s]) {
    dfs(u);
    }
}